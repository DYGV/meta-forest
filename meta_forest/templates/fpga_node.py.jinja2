import sys

import rclpy
from rclpy.node import Node

from {{ params.ros2_interface_pkg }}.msg import *

from .pynq_driver import *


class FpgaNode(Node):
    def __init__(self):
        super().__init__("fpga_node")
        self.init_ros2_parameters()
        self.fpga_driver = self.get_fpga_driver()
        self.init_subscriber()
        self.init_publisher()
        self.print_user_ip_info()

    def init_subscriber(self):
        fpga_in_msg_cls_obj = getattr(
            sys.modules[f"{self.ros2_interface_pkg}.msg"], self.ros2_interface_in
        )
        self.create_subscription(
            fpga_in_msg_cls_obj, self.fpga_in_topic, self.callback, 10
        )

    def init_publisher(self):
        fpga_in_msg_cls_obj = getattr(
            sys.modules[f"{self.ros2_interface_pkg}.msg"], self.ros2_interface_out
        )
        self.fpga_out_msg = fpga_in_msg_cls_obj()
        self.publisher = self.create_publisher(
            fpga_in_msg_cls_obj, self.fpga_out_topic, 10
        )

    def print_user_ip_info(self):
        self.get_logger().info(
            "User IP phys_addr = 0x{:X}".format(self.fpga_driver.physical_address)
        )
        self.get_logger().info(
            "User IP addr_range = 0x{:X}".format(self.fpga_driver.address_range)
        )

    def init_ros2_parameters(self):
        param_list = [
            ("ros2_interface_pkg", "{{ params.ros2_interface_pkg }}"),
            ("ros2_interface_in", "{{ params.ros2_interface_in }}"),
            ("ros2_interface_out", "{{ params.ros2_interface_out }}"),
            ("fpga_in_topic", "fpga_in_topic_{{ params.ip_name }}"),
            ("fpga_out_topic", "fpga_out_topic_{{ params.ip_name }}"),
            ("program_fpga", True),
            ("bitfile_path", "{{ params.bitfile_path }}"),
            ("user_ip", "{{ params.ip_name }}"),
        ]
        self.declare_parameters(namespace="", parameters=param_list)
        self.ros2_interface_pkg = self.get_parameter("ros2_interface_pkg").value
        self.ros2_interface_in = self.get_parameter("ros2_interface_in").value
        self.ros2_interface_out = self.get_parameter("ros2_interface_out").value
        self.bitfile = self.get_parameter("bitfile_path").value
        self.user_ip = self.get_parameter("user_ip").value
        self.program_fpga = self.get_parameter("program_fpga").value
        self.fpga_in_topic = self.get_parameter("fpga_in_topic").value
        self.fpga_out_topic = self.get_parameter("fpga_out_topic").value

    def get_fpga_driver(self):
        driver = FpgaDriver(
            self.bitfile,
            self.program_fpga,
            self.user_ip,
            self.ros2_interface_pkg,
            self.ros2_interface_in,
            self.ros2_interface_out,
        )
        self.get_logger().info(
            f"the user IP used for this node is set to {self.user_ip}"
        )
        return driver

    def callback(self, input_msg):
        self.get_logger().info(f"Received: {input_msg}")
        for fpga_in_signal in self.fpga_driver.in_map.keys():
            fpga_in_signal_msg_data = getattr(input_msg, fpga_in_signal)
            self.fpga_driver.process_input(fpga_in_signal, fpga_in_signal_msg_data)
        self.fpga_driver.do_calc()
        for fpga_out_signal in self.fpga_driver.out_map.keys():
            fpga_out_data = self.fpga_driver.process_output(fpga_out_signal)
            setattr(self.fpga_out_msg, fpga_out_signal, fpga_out_data)
        self.publisher.publish(self.fpga_out_msg)
        self.get_logger().info(f"Publishing: {self.fpga_out_msg}")


def main(args=None):
    rclpy.init(args=args)
    fpga_node = FpgaNode()
    rclpy.spin(fpga_node)
    fpga_node.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
