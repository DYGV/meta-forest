from {{ params.project }} import pynq_driver
from launch_ros.actions import Node
from launch import LaunchDescription


def generate_launch_description():
    bitfile_path = "{{ params.bitfile_path }}"
    ros2_interface_pkg = "{{ params.ros2_interface_pkg }}"
    ros2_interface_in_base = "{{ params.ros2_interface_in_base }}"
    ros2_interface_out_base = "{{ params.ros2_interface_out_base }}"
    fpga_in_topic_prefix = "fpga_in_topic_"
    fpga_out_topic_prefix = "fpga_out_topic_"
    ip_msg_table = {{ params.ip_msg_table }}

    print(f"Downloading {bitfile_path}")
    pynq_driver.FpgaDriver.program_fpga(bitfile_path)
    print("Done")

    fpga_nodes = [
        Node(
            package="{{ params.project }}",
            {%- if params.ros_distro == "eloquent" %}
            node_executable="fpga_node",
            node_name="fpga_node_%s" % ip_name,
            {%- else %}
            executable="fpga_node",
            name="fpga_node_%s" % ip_name,
            {%- endif %}
            parameters=[
                {
                    "bitfile_path": bitfile_path,
                    "ros2_interface_pkg": ros2_interface_pkg,
                    "ros2_interface_in": ros2_interface_in_base + str(msg_suffix),
                    "ros2_interface_out": ros2_interface_out_base + str(msg_suffix),
                    "fpga_in_topic": fpga_in_topic_prefix + ip_name,
                    "fpga_out_topic": fpga_out_topic_prefix + ip_name,
                    "program_fpga": False,
                    "bitfile_path": bitfile_path,
                    "user_ip": ip_name,
                }
            ],
            output="screen",
            emulate_tty=True,
        )
        for ip_name, msg_suffix in ip_msg_table.items()
    ]
    return LaunchDescription(fpga_nodes)
