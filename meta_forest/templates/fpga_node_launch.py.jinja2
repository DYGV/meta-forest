import os
import yaml
from ament_index_python.packages import get_package_share_directory
from launch_ros.actions import Node
from launch import LaunchDescription
from launch.substitutions import LaunchConfiguration, TextSubstitution
from launch.actions import (DeclareLaunchArgument, RegisterEventHandler, OpaqueFunction)
from launch.event_handlers import OnProcessStart


def program_fpga(context, *args,**kwargs):
    from {{ params.project }} import pynq_driver
    bitfile_path = kwargs["bitfile_path"].perform(context)
    print(f"Downloading {bitfile_path}")
    pynq_driver.FpgaDriver.program_fpga(bitfile_path)
    print("Done")

def generate_launch_description():
    bitfile_path = LaunchConfiguration("bitfile_path")
    bitfile_path_arg= DeclareLaunchArgument("bitfile_path",
            default_value=TextSubstitution(text="{{ params.bitfile_path }}")
    )

    param = os.path.join(
        get_package_share_directory("{{ params.project }}"),
        "fpga_node_parameters.yaml"
    )

    config = None
    fpga_nodes = []
    with open(param, "r") as f:
        config = yaml.safe_load(f)
    for node_name, value in config.items():
        params = value["ros__parameters"]
        fpga_nodes.append(
            Node(
                package="{{ params.project }}",
                node_executable="fpga_node",
                node_name=node_name,
                parameters=[params],
                output="screen",
                emulate_tty=True,
            )
        )

    program_handler = RegisterEventHandler(
            OnProcessStart(
                target_action=fpga_nodes[0],
                on_start=[
                    OpaqueFunction(function=program_fpga, kwargs={"bitfile_path": bitfile_path}),
                ]
            )
        )
    return LaunchDescription([bitfile_path_arg, program_handler, *fpga_nodes])
