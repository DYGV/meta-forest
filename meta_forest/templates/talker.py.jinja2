import sys
import random
import rclpy
from rclpy.node import Node
from rosidl_runtime_py import get_interface_path
from rosidl_adapter.parser import parse_message_file

from {{ params.project }}.msg import *


class TalkerNode(Node):
    def __init__(self):
        super().__init__("talker")
        self.declare_parameter(
            "fpga_in_topic", "fpga_in_topic_{{ params.ip_name }}"
        )
        self.declare_parameter("msg_type_suffix", "1")
        fpga_in_topic = self.get_parameter("fpga_in_topic").value
        msg_type_suffix = self.get_parameter("msg_type_suffix").value
        self.FpgaIn = getattr(
            sys.modules["{{ params.project }}.msg"], "FpgaIn" + msg_type_suffix
        )
        self.message_spec = parse_message_file(
            "{{ params.project }}",
            get_interface_path(
                "{{ params.project }}/msg/FpgaIn" + msg_type_suffix
            ),
        )
        self.publisher_ = self.create_publisher(
            self.FpgaIn, fpga_in_topic, {{params.qos}}
        )
        timer_period = 2  # Frequency of publishing
        self.timer = self.create_timer(timer_period, self.timer_callback)

    def generate_pub_data(self, msg, field, rand_func, args):
        if field.type.is_array:
            for idx in range(field.type.array_size):
                getattr(msg, field.name)[idx] = rand_func(*args)
        else:
            setattr(msg, field.name, rand_func(*args))

        return msg

    def timer_callback(self):
        msg = self.FpgaIn()
        for field in self.message_spec.fields:
            if "int" in field.type.type:
                msg = self.generate_pub_data(
                    msg, field, random.randint, [0, 5]
                )
            elif "float" in field.type.type:
                msg = self.generate_pub_data(
                    msg, field, random.uniform, [0.0, 5.0]
                )

        self.publisher_.publish(msg)
        self.get_logger().info("Publishing: {}".format(msg))


def main(args=None):
    rclpy.init(args=args)

    talker = TalkerNode()

    rclpy.spin(talker)

    talker.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
