# Import ROS python and Node functionalities
import rclpy
from rclpy.node import Node

# ros_fpga_lib has the functions to interact with the FPGA HW
from .ros_fpga_lib import *

# Import the messages defined for the ROS FPGA Node interface
from {{ prj_name }}_interface.msg import FpgaOut
from {{ prj_name }}_interface.msg import FpgaIn

# Define the FPGA Node class (has publisher and subscriber methods)
class FpgaNode(Node):

    def __init__(self):
        super().__init__('fpga_node')
        # Publish to the fpga_out_topic topic, message type is FpgaOut
        self.publisher_ = self.create_publisher(FpgaOut, 'fpga_out_topic', {{ qos }})
        # Subscribe to the fpga_in_topic topic, message type is FpgaIn
        self.subscription = self.create_subscription(FpgaIn, 'fpga_in_topic', self.fpga_sub_callback, {{ qos }})
        self.subscription
        # Instantiate the FpgaDriver, program and setup the FPGA
        self.fpga = FpgaDriver()
        self.fpga.program_fpga()
        self.fpga.setup_fpga()

    def fpga_pub_callback(self):
        msg = FpgaOut()
        # Read output from HW
        {%- for out_signal in out_signals %}
        msg.{{ out_signal }} = self.fpga.process_output('{{ out_signal }}')
        {%- endfor %}
        # Publish the result and print to the command line
        self.publisher_.publish(msg)

    def fpga_sub_callback(self, msg):
        # Set input values
        {%- for in_signal in in_signals %}
        self.fpga.process_input('{{ in_signal }}', msg.{{ in_signal }})
        {%- endfor %}
	{%- if has_axis_in or has_axis_out %}
	# Setup the input and/or output AXI-Stream buffers
        self.fpga.setup_dma_buffers()
        {%- endif %}
        # Calculate the results
        self.fpga.do_calc()
        # Call the publisher callback
        self.fpga_pub_callback()

def main(args=None):
    rclpy.init(args=args)

    fpga_node = FpgaNode()

    rclpy.spin(fpga_node)

    fpga_node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

